Gentoo overlay for adding AOT native compilation support for emacs packages to portage.

* Usage

Add this overlay to the systems repos and add ~eln~ to ~load-suffixes~ in your emacs ~early-init.el~.

#+begin_src elisp
  (add-to-list 'load-suffixes ".eln")
#+end_src

To prevent emacs from JIT compiling packages set ~native-comp-jit-compilation~ to ~nil~.

#+begin_src elisp
  (setq native-comp-jit-compilation nil)
#+end_src

*** TODO Todo: Make packages add themselves to the JIT compilation deny list, which allows using portage AOT compilation and JIT compilation at the same time.

** Profile
A basic profile is included that masks the ~native-compilation~ use flag by default, and unmasks it on a per-package basis.

When packages are patched to be compatible with the new use flag, or if they already work, add them to the list.

Sharing which packages you have tested would be very helpful which can be done by making a PR against this repo.

** USE flags
Enable the ~native-compilation~ USE flag to enable native compilation on packages that inherit from ~elisp-common.eclass~ or ~elisp.eclass~.

** Importing and updating packages
Fetch the ~master~ branch from ~gentoo.git~ and associate it with a local branch in your copy of this repo.

#+begin_src bash
  git fetch "${GENTOO_REPO}" "master:gentoo"
#+end_src

The new branch will allow to checkout files from ~${GENTOO_REPO}~.

It is possible to checkout specific paths, for example, to update this repos ~app-emacs~ packages to the most recent versions available.

#+begin_src bash
  git checkout "gentoo" "app-emacs"
#+end_src

* How does it work?

** Eclasses
The elisp eclasses have been modified to compile and install binaries when the ~native-compilation~ *USE* flag is enabled.

*** elisp-compile
~elisp-compile~ simply invokes the native compilation alternative to ~batch-compile~, ~batch-native-compile~.

The variable ~native-compile-target-directory~ is set to ~default-directory~ which causes emacs to output compiled binaries in the current working directory. This is how ~batch-compile~ works by default.

*** elisp-install
When provided, elisp-install will install binaries along with source and bytecode files.

Each package is installed into it's own subdirectory inside of ~${NATIVELISP}~ (technically a subdirectory of a version and ABI derived subdirectory in ~${NATIVELISP}~

*** Sitefiles
The packages sitefile is used to configure emacs to use the binaries. This is done by appending the path to the binaries to ~load-path~ and adding ~eln~ to ~load-suffixes~.

The sitefile also contains a condition that checks if the currently running emacs instance is the same version and has the same ABI as the one that was used to build and install the binaries for this package. This is done using the value of ~comp-native-version-dir~ in emacs. Users can have this value interpolated into the sitefile using the ~@COMP_NATIVE_VERSION_DIR@~ token.

#+begin_src elisp
  ;; use elisp binaries if possible
  ;;
  ;; @NATIVELISP@ expands to the path containing the packages
  ;; binaries.

  (when (and (ignore-errors (native-comp-available-p))
             (string= comp-native-version-dir "@COMP_NATIVE_VERSION_DIR@"))
    (add-to-list 'load-path "@NATIVELISP@"))
#+end_src


** Emacs patches

A few very small patches have been applied to ~comp.el~ to make ~batch-native-compile~ function more package manager friendly.

Before patching, ~batch-native-compile~ would not respect ~native-compile-target-directory~, and only gave an option of using the last value of ~native-comp-eln-load-path~ which is intended to be used for binaries for packages built into emacs.

Also before patching, ~batch-native-compile~ would mangle filenames. The name mangling algorithm uses hashes of the source files absolute filename and it's contents. Package managers such as portage typically compile files in a temporary directory and then move them into the root filesystem when installing, which breaks the name managling algorithm.
